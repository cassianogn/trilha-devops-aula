name: deploy-$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

variables:
  # ---- Docker/ACR ----
  ACR_LOGIN_SERVER: 'luistickts.azurecr.io'   # login server do seu ACR
  IMAGE_NAME: 'luistickts-api'                # repositório no ACR
  IMAGE_TAG: '$(Build.BuildId)'                # tag única por build
  DOCKERFILE: './api/LuisDev.DemoApp/LuisDev.DemoApp/Dockerfile'
  BUILD_CONTEXT: '.'                           # build a partir da raiz do repo

  # ---- Helm/Chart ----
  RELEASE_NAME: 'demoapi'
  CHART_PATH: './helm/app'
  VALUES_FILE: './api/LuisDev.DemoApp/LuisDev.DemoApp/cicd/demoapp.helm.yaml'
  K8S_NAMESPACE: 'dev'

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
  fetchDepth: 0

# (opcional) informações de versão das ferramentas
- script: |
    docker version
    helm version || true
  displayName: "Tools info"

# Build + push para o ACR
- task: Docker@2
  displayName: "Docker build & push ($(IMAGE_NAME):$(IMAGE_TAG), latest)"
  inputs:
    containerRegistry: 'luis-acr'            # <— sua service connection do ACR
    repository: '$(IMAGE_NAME)'               # NÃO inclua o registry aqui
    command: 'buildAndPush'
    Dockerfile: '$(DOCKERFILE)'
    buildContext: '$(BUILD_CONTEXT)'
    tags: |
      $(IMAGE_TAG)
      latest

# Instala Helm 3
- task: HelmInstaller@1
  displayName: "Install Helm 3"
  inputs:
    helmVersionToInstall: '3.13.3'

# Helm upgrade/install no AKS
- task: HelmDeploy@0
  displayName: "Helm upgrade --install ($(RELEASE_NAME)) -> $(K8S_NAMESPACE)"
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceConnection: 'luis-aks-dev'   # <— sua service connection do AKS
    namespace: '$(K8S_NAMESPACE)'
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: '$(CHART_PATH)'
    releaseName: '$(RELEASE_NAME)'
    install: true
    valueFile: '$(VALUES_FILE)'
    arguments: >
      --set image.repository=$(ACR_LOGIN_SERVER)/$(IMAGE_NAME)
      --set image.tag=$(IMAGE_TAG)
