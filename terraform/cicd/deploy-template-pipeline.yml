parameters:
- name: envs
  type: object

stages:
- ${{ each env in parameters.envs }}:
  - stage: apply_terraform_${{ env.name }}
    displayName: "apply terraform ${{ env.name }}"
    pool:
      vmImage: ubuntu-latest
    jobs:
    - deployment: apply_${{ env.name }}
      displayName: "Apply ${{ env.name }}"
      environment: ${{ env.name }}   
      variables:
      - group: "trilha-devops"       
      - name: TF_WORKDIR
        value: "$(System.DefaultWorkingDirectory)/terraform"
      - name: TFVARS_PATH
        value: "envs/${{ env.name }}.tfvars"
      - name: STATE_KEY
        value: "envs/${{ env.name }}/terraform.tfstate"
      strategy:
        runOnce:
          deploy:
            steps:
            - script: |
                echo '${{ env.name }}'
                echo ${{ env.apply }}
            - checkout: self

            - task: TerraformInstaller@1
              displayName: "Install Terraform"
              inputs:
                terraformVersion: "1.6.6"

            - task: TerraformTask@5
              displayName: "Terraform init "
              inputs:
                provider: "azurerm"
                command: "init"
                workingDirectory: "$(TF_WORKDIR)"
                backendServiceArm: "Azure subscription 1(093ea378-3099-4ff4-b2ec-b80dc1c14243)"
                backendAzureRmResourceGroupName: "laboratorio"
                backendAzureRmStorageAccountName: "aulasluis"
                backendAzureRmContainerName: "${{ env.name }}"
                backendAzureRmKey: "$(STATE_KEY)"
                commandOptions: >
                  -backend-config=access_key=$(STORAGE_KEY)
                  -upgrade

            - ${{ if eq(env.apply, true) }}:
              - task: AzureCLI@2
                displayName: "Terraform plan"
                inputs:
                  azureSubscription: "Azure subscription 1(093ea378-3099-4ff4-b2ec-b80dc1c14243)"
                  addSpnToEnvironment: true
                  scriptType: bash
                  workingDirectory: "$(TF_WORKDIR)"
                  scriptLocation: inlineScript
                  inlineScript: |
                    set -e
                    export ARM_CLIENT_ID="$servicePrincipalId"
                    export ARM_TENANT_ID="$tenantId"
                    export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
                    export ARM_USE_OIDC=true
                    export ARM_OIDC_TOKEN_FILE="${AZURE_FEDERATED_TOKEN_FILE}"

                    set +e
                    terraform plan -var-file="$(TFVARS_PATH)" -input=false -out=tfplan -detailed-exitcode
                    code=$?
                    set -e

                    if [ $code -eq 0 ]; then
                      echo "Sem mudanças."
                      echo "##vso[task.setvariable variable=TF_PLAN_HAS_CHANGES]false"
                      exit 0
                    elif [ $code -eq 2 ]; then
                      echo "Plan gerado com mudanças."
                      echo "##vso[task.setvariable variable=TF_PLAN_HAS_CHANGES]true"
                      exit 0
                    else
                      echo "Erro no terraform plan (exit $code)"
                      exit $code
                    fi

              - task: AzureCLI@2
                displayName: "Terraform apply"
                condition: eq(variables['TF_PLAN_HAS_CHANGES'], 'true')
                inputs:
                  azureSubscription: "Azure subscription 1(093ea378-3099-4ff4-b2ec-b80dc1c14243)"
                  addSpnToEnvironment: true
                  scriptType: bash
                  workingDirectory: "$(TF_WORKDIR)"
                  scriptLocation: inlineScript
                  inlineScript: |
                    set -e
                    export ARM_CLIENT_ID="$servicePrincipalId"
                    export ARM_TENANT_ID="$tenantId"
                    export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
                    export ARM_USE_OIDC=true
                    export ARM_OIDC_TOKEN_FILE="${AZURE_FEDERATED_TOKEN_FILE}"
                    terraform apply -input=false -auto-approve tfplan
