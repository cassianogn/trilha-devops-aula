trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: ENV
  value: 'dev'
- name: TF_WORKDIR
  value: '$(System.DefaultWorkingDirectory)/terraform'
- name: TFVARS_PATH
  value: 'envs/$(ENV).tfvars'   # relativo ao TF_WORKDIR

steps:
- checkout: self

- task: TerraformInstaller@1
  inputs:
    terraformVersion: '1.6.6'

# INIT (usa AAD/OIDC via Service Connection; sem access key)

# - task: TerraformTask@5
#   displayName: 'Terraform init (AAD/OIDC)'
#   inputs:
#     provider: azurerm
#     command: init
#     workingDirectory: $(TF_WORKDIR)
#     backendServiceArm: 'subcription laboratorio'
#     environmentServiceNameAzureRM: 'subcription laboratorio'
#     backendAzureRmResourceGroupName: 'laboratorio'
#     backendAzureRmStorageAccountName: 'aulasluis'
#     backendAzureRmContainerName: 'dev'                # use o que padronizou
#     backendAzureRmKey: 'envs/$(ENV)/'
- task: TerraformTask@5
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(TF_WORKDIR)'
    backendServiceArm: 'subcription laboratorio'
    backendAzureRmStorageAccountName: 'aulasluis'
    backendAzureRmContainerName: 'dev'
    backendAzureRmKey: 'final/terraform.tfstate'

# PLAN
# - task: TerraformTask@5
#   displayName: 'Terraform plan'
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(TF_WORKDIR)'
#     environmentServiceNameAzureRM: 'subcription laboratorio'
#     commandOptions: >
#       -var-file=$(TFVARS_PATH)
#       -input=false
#       -out=tfplan
#     publishPlanResults: 'terraformPlan'

# # APPLY
# - task: TerraformTask@5
#   displayName: 'Terraform apply'
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: '$(TF_WORKDIR)'
#     environmentServiceNameAzureRM: 'subcription laboratorio'
#     commandOptions: >
#       -input=false
#       -auto-approve
#       tfplan