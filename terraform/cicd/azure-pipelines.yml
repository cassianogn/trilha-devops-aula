trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'trilha-devops'

- name: ENV
  value: 'dev'
- name: TF_WORKDIR
  value: '$(System.DefaultWorkingDirectory)/terraform'
- name: TFVARS_PATH
  value: 'envs/$(ENV).tfvars'   # <-- era 'terraform/envs/...', ajuste aqui

steps:
- checkout: self

- task: TerraformInstaller@1
  inputs:
    terraformVersion: '1.6.6'

- task: TerraformTask@5
  displayName: 'Terraform init (access key)'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(TF_WORKDIR)'
    # A task exige uma Service Connection para backend:
    backendServiceArm: 'subcription laboratorio'     # <â€” sua SC
    backendAzureRmResourceGroupName: 'laboratorio'
    backendAzureRmStorageAccountName: 'aulasluis'
    backendAzureRmContainerName: '$(ENV)'
    backendAzureRmKey: 'terraform.tfstate'
    # Auth do backend via Access Key (vinda do Variable Group)
    commandOptions: '-backend-config=access_key=$(STORAGE_KEY) -upgrade'

- task: TerraformTask@5
  displayName: 'Terraform plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(TF_WORKDIR)'
    environmentServiceNameAzureRM: 'subcription laboratorio'   # mesma SC
    commandOptions: >
      -var-file=$(TFVARS_PATH)
      -input=false
      -out=tfplan
    publishPlanResults: 'terraformPlan'  # opcional: anexa o plano no job

# APPLY usando o plano gerado
- task: TerraformTask@5
  displayName: 'Terraform apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(TF_WORKDIR)'
    environmentServiceNameAzureRM: 'subcription laboratorio'
    commandOptions: >
      -input=false
      -auto-approve
      tfplan