trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'trilha-devops'             # cont√©m STORAGE_KEY (secret)

- name: ENV
  value: 'dev'
- name: TF_WORKDIR
  value: '$(System.DefaultWorkingDirectory)/terraform'
- name: TFVARS_PATH
  value: 'envs/$(ENV).tfvars'        # relativo ao TF_WORKDIR
- name: STATE_CONTAINER
  value: 'dev'                       # <<< fixo
- name: STATE_KEY
  value: 'envs/$(ENV)/terraform.tfstate'

steps:
- checkout: self

- task: TerraformInstaller@1
  inputs:
    terraformVersion: '1.6.6'

# INIT (backend via access key)
- task: TerraformTask@5
  displayName: 'Terraform init (access key)'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(TF_WORKDIR)'
    backendServiceArm: 'subcription laboratorio'
    backendAzureRmResourceGroupName: 'laboratorio'
    backendAzureRmStorageAccountName: 'aulasluis'
    backendAzureRmContainerName: '$(STATE_CONTAINER)'   # -> dev
    backendAzureRmKey: '$(STATE_KEY)'
    commandOptions: >
      -backend-config=access_key=$(STORAGE_KEY)
      -upgrade

# PLAN
- task: TerraformTask@5
  displayName: 'Terraform plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(TF_WORKDIR)'
    environmentServiceNameAzureRM: 'subcription laboratorio'
    commandOptions: >
      -var-file=$(TFVARS_PATH)
      -input=false
      -out=tfplan
    publishPlanResults: 'terraformPlan'

# APPLY
- task: TerraformTask@5
  displayName: 'Terraform apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(TF_WORKDIR)'
    environmentServiceNameAzureRM: 'subcription laboratorio'
    commandOptions: >
      -input=false
      -auto-approve
      tfplan
