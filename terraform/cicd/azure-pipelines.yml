trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'trilha-devops'             # cont√©m STORAGE_KEY (secret)

- name: ENV
  value: 'dev'
- name: TF_WORKDIR
  value: '$(System.DefaultWorkingDirectory)/terraform'
- name: TFVARS_PATH
  value: 'envs/$(ENV).tfvars'        # relativo ao TF_WORKDIR
- name: STATE_CONTAINER
  value: 'dev'                       # <<< fixo
- name: STATE_KEY
  value: 'envs/$(ENV)/terraform.tfstate'

steps:
- checkout: self
- task: TerraformInstaller@1
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: '1.6.6'
- task: TerraformTask@5
  displayName: 'Terraform init (access key)'
  inputs:
    provider: azurerm
    command: init
    workingDirectory: $(TF_WORKDIR)
    backendServiceArm: 'subcription laboratorio'   # NOVA SC (client secret)
    backendAzureRmResourceGroupName: 'laboratorio'
    backendAzureRmStorageAccountName: 'aulasluis'
    backendAzureRmContainerName: 'dev'
    backendAzureRmKey: 'envs/$(ENV)/terraform.tfstate'
    commandOptions: '-backend-config=access_key=$(STORAGE_KEY) -upgrade'

- task: TerraformTask@5
  displayName: 'Terraform plan'
  inputs:
    provider: azurerm
    command: plan
    workingDirectory: $(TF_WORKDIR)
    environmentServiceNameAzureRM: 'subcription laboratorio'  # mesma SC
    commandOptions: '-var-file=$(TFVARS_PATH) -input=false -out=tfplan'

- task: TerraformTask@5
  displayName: 'Terraform apply'
  inputs:
    provider: azurerm
    command: apply
    workingDirectory: $(TF_WORKDIR)
    environmentServiceNameAzureRM: 'subcription laboratorio'
    commandOptions: '-input=false -auto-approve tfplan'
# APPLY consumindo o plano
# - task: AzureCLI@2
#   displayName: 'Terraform apply (OIDC via ARM_*)'
#   inputs:
#     azureSubscription: 'subcription laboratorio'
#     addSpnToEnvironment: true
#     scriptType: bash
#     workingDirectory: '$(TF_WORKDIR)'
#     scriptLocation: inlineScript
#     inlineScript: |
#       set -e
#       export ARM_CLIENT_ID="$servicePrincipalId"
#       export ARM_TENANT_ID="$tenantId"
#       export ARM_SUBSCRIPTION_ID="$(az account show --query id -o tsv)"
#       export ARM_USE_OIDC=true
#       export ARM_OIDC_TOKEN_FILE="${AZURE_FEDERATED_TOKEN_FILE}"

#       terraform apply -input=false -auto-approve tfplan