trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  ENV: 'dev'                                   # dev | prod
  TF_WORKDIR: 'terraform'
  TFVARS_PATH: 'terraform/envs/$(ENV).tfvars'

steps:
- checkout: self


- task: TerraformInstaller@1
  inputs:
    terraformVersion: '1.6.6'


# INIT usando seu .hcl
- task: TerraformTask@5
  displayName: 'Terraform init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(TF_WORKDIR)'
    backendServiceArm: 'Azure subscription 1(093ea378-3099-4ff4-b2ec-b80dc1c14243)'
    backendAzureRmStorageAccountName: 'aulasluis'
    backendAzureRmContainerName: 'dev'
    backendAzureRmKey: 'aks/terraform.tfstate'

    # ^ usa a mesma Service Connection para autenticar o backend

# PLAN lendo o tfvars
- task: TerraformTask@5
  displayName: 'Terraform plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(TF_WORKDIR)'
    environmentServiceNameAzureRM: 'Azure subscription 1(093ea378-3099-4ff4-b2ec-b80dc1c14243)'
    commandOptions: '-var-file=$(TFVARS_PATH)'
    publishPlanResults: 'terraformPlan'

# APPLY (opcional)
# - task: TerraformTask@5
#   displayName: 'Terraform apply'
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: '$(TF_WORKDIR)'
#     environmentServiceNameAzureRM: 'Azure subscription 1(093ea378-3099-4ff4-b2ec-b80dc1c14243)'
#     commandOptions: '-auto-approve'
